import os
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from googletrans import Translator, LANGUAGES
import subprocess
import json
from gtts import gTTS
import pymorphy3
morph = pymorphy3.MorphAnalyzer()
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Define state for feedback
class Form(StatesGroup):
    feedback = State()
    
bot_token = "7013690800:AAG8UX5dpYlm--Fc5PsqhiNsigFTcvnNir8"
langchose = "ru"
bot = Bot(token=bot_token)

storage = MemoryStorage()

dp = Dispatcher(bot, storage=storage)

user_languages = {}
user_settings = {}

Bot.set_current(bot)
semaphore = asyncio.Semaphore(2)  # –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
translator = Translator()
def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ üè≥Ô∏è", "–ü–æ–º–æ—â—å ‚ùì", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚úâÔ∏è"]
    keyboard.add(*buttons)
    return keyboard

# Start command handler
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    keyboard = get_start_keyboard()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã \n \n–Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∂–µ—Å—Ç–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ —Å –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ò–ò! üß† \n \n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ—Å–æ–æ—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≤–∏–¥–µ–æ) –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –∂–µ—Å—Ç—ã –≤ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å! üìü \n \n–í—ã–±–æ—Ä —è–∑—ã–∫–∞ - —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∂–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π) üá∑üá∫ \n \n–ü–æ–º–æ—â—å - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Ç—É–¥–∞ –ø–æ –ª—é–±–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—É ‚ùì  \n \n/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚öôÔ∏è", reply_markup=keyboard)

# Handlers for each button option
@dp.message_handler(lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚úâÔ∏è", state='*')
async def feedback_start(message: types.Message):
    await Form.feedback.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")

@dp.message_handler(state=Form.feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    with open('feedback.txt', 'a', encoding='utf-8') as file:
        file.write(f"UserID {message.from_user.id}: {message.text}\n")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –µ–≥–æ –æ—Ç–∑—ã–≤ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.finish()
    
    
@dp.message_handler(lambda message: message.text == "–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ üè≥Ô∏è")
async def choose_language_handler(message: types.Message):
    # Implement language selection functionality here
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    lang_keyboard = InlineKeyboardMarkup(row_width=2)
    lang_keyboard.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="ru"),
        InlineKeyboardButton("üá∫üá∏ English", callback_data="en"),
        InlineKeyboardButton("üáÆüá≥ India", callback_data="hi"),
        InlineKeyboardButton("üá¶üá™ Arabic", callback_data="ar"),
        InlineKeyboardButton("üá©üá™ Deutsch", callback_data="de"),
        InlineKeyboardButton("üá®üá≥ ‰∏≠Êñá", callback_data="zh-cn"),
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=lang_keyboard)


def set_user_language(user_id, lang_choice):
    user_languages[user_id] = lang_choice
    
@dp.callback_query_handler(lambda c: c.data in ["ru", "en", "hi", "ar", "de", "zh-cn"])
async def process_language_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang_choice = callback_query.data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_language(user_id, lang_choice)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {LANGUAGES.get(lang_choice, lang_choice)}")

     
@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å ‚ùì")
async def help_handler(message: types.Message):
    # Implement help functionality here
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏! \n \n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @Rayni777")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id): 
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'both'
    return user_settings.get(user_id, 'both')

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message_handler(commands=['settings'])
async def command_settings(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 'text', 'audio', 'both'
    keyboard.add(InlineKeyboardButton("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data='set_text'))
    keyboard.add(InlineKeyboardButton("–¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ", callback_data='set_audio'))
    keyboard.add(InlineKeyboardButton("–¢–µ–∫—Å—Ç –∏ –∞—É–¥–∏–æ", callback_data='set_both'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query_handler(lambda c: c.data in ['set_text', 'set_audio', 'set_both'])
async def callback_settings(call: types.CallbackQuery):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    user_settings[user_id] = call.data.split('_')[1]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É (text, audio, both)
    await call.message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {user_settings[user_id]}")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ
@dp.callback_query_handler(lambda call: call.data in ['text', 'audio', 'both'])
async def query_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_setting = get_user_settings(user_id)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_setting in ['text', 'both']:
        await bot.send_message(chat_id=call.message.chat.id, text=context['text'], reply_to_message_id=call.message.message_id)
    if user_setting in ['audio', 'both']:
        audio_file = context['audio_file']
        if audio_file:
            with open(audio_file, 'rb') as audio:
                await bot.send_voice(chat_id=call.message.chat.id, voice=audio, caption="–í–∞—à —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–µ", reply_to_message_id=call.message.message_id)
            os.remove(audio_file)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await call.message.edit_reply_markup()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /settings –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
dp.register_message_handler(command_settings, commands=['settings'])


@dp.callback_query_handler(lambda c: c.data in ["ru", "en", "hi", "ar", "de", "zh-cn"])
async def process_language_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang_choice = callback_query.data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è user_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞.
    user_languages[user_id] = lang_choice

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω.
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {LANGUAGES.get(lang_choice, lang_choice)}")

# –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é langchose –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —è–∑—ã–∫
def get_user_language(user_id):
    return user_languages.get(user_id, "ru")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ "ru" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_user_language(user_id) –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π langchose
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ video_worker –º–µ–Ω—è–µ–º langchose –Ω–∞ get_user_language(message.from_user.id)

d_1 = {'–Ω–æ–ª—å': 0, '–æ–¥–∏–Ω': 1, '–¥–≤–∞': 2, '—Ç—Ä–∏': 3, '—á–µ—Ç—ã—Ä–µ': 4, '–ø—è—Ç—å': 5, '—à–µ—Å—Ç—å': 6, '—Å–µ–º—å': 7, '–≤–æ—Å–µ–º—å': 8,
        '–¥–µ–≤—è—Ç—å': 9, '–¥–µ—Å—è—Ç—å': 10, '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å': 11, '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å': 12, '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å': 13, '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å': 14,
        '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 15, '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å': 16, '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 17, '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 18, '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 19, '–¥–≤–∞–¥—Ü–∞—Ç—å': 20,
        '—Ç—Ä–∏–¥—Ü–∞—Ç—å': 30, '—Å–æ—Ä–æ–∫': 40, '–ø—è—Ç—å–¥–µ—Å—è—Ç': 50, '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç': 60, '—Å–µ–º—å–¥–µ—Å—è—Ç': 70,'–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç': 80, '–¥—è–≤—è–Ω–æ—Å—Ç–æ': 90, 
        '—Å—Ç–æ': 100, '–¥–≤–µ—Å—Ç–∏': 200, '—Ç—Ä–∏—Å—Ç–∞': 300, '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞': 400, '–ø—è—Ç—å—Å–æ—Ç': 500, '—à–µ—Å—Ç—å—Å–æ—Ç': 600, '—Å–µ–º—å—Å–æ—Ç': 700,
        '–≤–æ—Å–µ–º—å—Å–æ—Ç': 800, '–¥–µ–≤—è—Ç—å—Å–æ—Ç': 900, '—Ç—ã—Å—è—á–∞': 10**3, '–º–∏–ª–ª–∏–æ–Ω': 10**6, '–º–∏–ª–ª–∏–∞—Ä–¥': 10**9}
d = list(d_1.keys())

def preob(ch):
    s = list(map(int, ch.split()))
    k = 0
    h = []
    a = 0
    for i in range(len(s)):
        if (i<len(s)-1) and ((s[i]<s[i+1]<1000) or (0<=s[i+1]<=19 and 0<=s[i]<=19) or (20<=s[i+1]<=90 and 20<=s[i]<=90) or (100<=s[i+1]<=900 and 100<=s[i]<=900) or (1000<=s[i+1] and 1000<=s[i])):
            if s[i] < 1000:
                h.append(k + a + s[i])
            else:
                h.append(k + a * s[i])
            k = 0
            a = 0
        elif 0<=s[i]<=900:
            a += s[i]
        else:
            k += a*s[i]
            a =0
        if i == len(s)-1:
            h.append(k + a)
    return h

def prenad(sl):
    if {'plur'} in morph.parse(sl[0])[0].tag:
        a = (morph.parse('–ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—â–∏–π')[0].inflect({'plur'}).word())
        b = (morph.parse(sl[1])[0].inflect({'datv'}).word())
                                          
        return sl[0] + a + b
    if morph.parse(sl[0])[0].tag.person not in ['1per', '2per']:
        gen = morph.parse(sl[0])[0].tag.gender
    else:
        gen = 'masc'
    out = sl[0] + ', ' + (morph.parse('–ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—â–∏–π')[0].inflect({gen}).word) + ' ' + (morph.parse(sl[1])[0].inflect({'datv'}).word)
    return out                                                                                

def mini_encoder(out):
    out = out.split()
    
    k = (1 if len(out)>1 else 0)
    
    for i in range(k, len(out)):
        if '/' in out[i]:
            out[i] = out[i][:out[i].find('/')]
        
        if out[i] == '–æ–Ω/–æ–Ω–∞/–æ–Ω–∏':
            out[i] = '–æ–Ω'
            
        if ';' in out[i]:
            j = out[i].index(';')
            out[i] = out[i][:j]
        if '(' in out[i]:
            j = out[i].index('(')
            out[i] = out[i][j + 1: -1]
            
        if out[i] in ['—á—Ç–æ', '–∫—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–æ—Ç–∫—É–¥–∞', '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–∫—É–¥–∞']:
            out[i] += '?'
        
        if out[i] == '–Ω–µ' or out[i] == '–Ω–µ—Ç':
            out[i - 1], out[i] = out[i], out[i - 1]
            
        if out[i] == '–º–æ–π' or out[i] == '—Å–≤–æ–π':
            out[i - 1], out[i] = out[i], out[i - 1]
            
        if ({'ADJF'} in morph.parse(out[i])[0].tag) and (({'NOUN'} in morph.parse(out[i-1])[0].tag)) and (out[i] not in ['–º–æ–π', '—Å–≤–æ–π', '—Ç–≤–æ–π']):
            out[i - 1], out[i] = out[i], out[i - 1]  
            
        if (out[i - 1] in ['–º–∞—Ç—å', '–º–∞–º–∞'] and out[i] in ['–æ—Ç–µ—Ü', '–ø–∞–ø–∞']) or (out[i - 1] in ['–º–∞—Ç—å', '–º–∞–º–∞'] and out[i] in ['–æ—Ç–µ—Ü', '–ø–∞–ø–∞']):
            out[i - 1], out[i] = '', '—Ä–æ–¥–∏—Ç–µ–ª–∏'
            
        if out[i] == '–º–Ω–æ–≥–æ':
            out[i-1], out[i] = '', morph.parse(out[i-1])[0].inflect({'plur'}).word
        
        if out[i] == 'MakDonalds':
            out[i] = '–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞'
        
        if (out[i] in ['—Ä–∞–¥–∏','—Ç–≤–æ–π', '–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å']):
            j = i
            while out[j - 2] == '':
                j -= 1
            out[i] = prenad([out[j - 2], out[i - 1], out[i]]) + ('' if i == len(out) - 1 else ',')
            out[j - 2], out[i - 1] = '', ''
            
        if out[i] in ['–≥–æ—Ç–æ–≤', '–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ', '–∑–∞–∫–æ–Ω—á–∏—Ç—å'] and\
        (({'VERB'} in morph.parse(out[i - 1])[0].tag) or ({'INFN'} in morph.parse(out[i - 1])[0].tag)):
            gen = 'masc' if morph.parse(out[i - 2])[0].tag.gender == None else morph.parse(out[i - 2])[0].tag.gender
            out[i] = morph.parse(out[i-1])[0].inflect({'VERB', 'past', gen}).word
            out[i - 1] = ''
            
        if out[i] in ['—Ä–∞–Ω–æ'] and\
        (({'VERB'} in morph.parse(out[i - 1])[0].tag) or ({'INFN'} in morph.parse(out[i - 1])[0].tag)):
            gen = 'masc' if morph.parse(out[i - 2])[0].tag.gender == None else morph.parse(out[i - 2])[0].tag.gender
            out[i] = '–µ—â—ë –Ω–µ ' + morph.parse(out[i-1])[0].inflect({'VERB', 'past', gen}).word
            out[i - 1] = ''
                
        if out[i] in d:
            a = ''
            j = i
            while out[j] in d:
                a += str(d_1[out[j]])
                out[j] = ''
                if j == len(out) - 1:
                    break
                j += 1
            num = preob(a)
            if len(num) == 1 and i > 0:                
                out[j] = morph.parse(out[i-1])[0].make_agree_with_number(num[0]).word
                out[i-1] = num[0]
            else:
                for p in num:
                    out[j] = p
            
    fin = ''
    for i in out:
        if i != '':
            fin += str(i) + ' '
    return fin

                                             
async def video_worker():
    while True:
        message, video_path = await queue.get()
        user_id = message.from_user.id
        async with semaphore:
            try:
                process = await asyncio.create_subprocess_exec(
                    'python', 'video_demo.py', '-c', 'config.json', video_path,
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE
                )
                stdout, stderr = await process.communicate()

                if stderr:
                    print(f"Errors: {stderr.decode()}")

                stdout_data = stdout.decode('cp1251').strip()
                raw_results_list = stdout_data.strip('[]').split("', '")
                results_list = [word.strip("'") for word in raw_results_list if word.strip("'").lower() != "–Ω–µ—Ç –∂–µ—Å—Ç–∞"]

                if not results_list:
                    await message.answer("–ñ–µ—Å—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
                    return

                words = ' '.join(results_list).split()
                cleaned_words = [words[i] for i in range(len(words)) if i == 0 or words[i] != words[i-1]]
                clean_result = ' '.join(cleaned_words)

                result_in_english = translator.translate(clean_result, src='ru', dest='en').text
                result_finally = translator.translate(result_in_english, src='en', dest=get_user_language(user_id)).text

                context = {'text': mini_encoder(result_finally), 'audio_file': None}

                user_setting = get_user_settings(message.from_user.id)

                if user_setting in ['text', 'both']:
                    await message.answer(context['text'])

                if user_setting in ['audio', 'both']:
                    tts = gTTS(text=context['text'], lang=get_user_language(user_id))
                    audio_file = f'audio_{message.message_id}.mp3'
                    tts.save(audio_file)
                    if os.path.exists(audio_file):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        with open(audio_file, 'rb') as audio:
                            await bot.send_voice(chat_id=message.chat.id, voice=audio, caption="–í–∞—à —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–µ", reply_to_message_id=message.message_id)
                        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        try:
                            os.remove(audio_file)
                        except OSError as e:
                            print(f"Error: {e.strerror}")


                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª
                with open("results.txt", "a") as file:
                    file.write(f"User ID: {user_id}\n")
                    file.write(f"Result: {context['text']}\n")
                    file.write("Rating: ")

                rating_keyboard = InlineKeyboardMarkup(row_width=5)
                rating_buttons = [InlineKeyboardButton(text=f"{i}‚≠êÔ∏è", callback_data=f"rating_{i}") for i in range(1, 6)]
                rating_keyboard.add(*rating_buttons)
                await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", reply_markup=rating_keyboard)

            except subprocess.CalledProcessError as e:
                # Handle the subprocess error. No task_done() call here.
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
                print(str(e))
            except Exception as e:
                # Handle other exceptions. No task_done() call here.
                await message.answer("–ù–∞ –≤–∏–¥–µ–æ –∂–µ—Å—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
                print(str(e))
            finally:
                if os.path.exists(video_path):
                    os.remove(video_path)

            # The single task_done() call for the task just processed.
            queue.task_done()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('rating'))
async def process_callback_rating(callback_query: types.CallbackQuery):
    # Extract the rating from the callback data
    rating = callback_query.data.split("_")[1]
    
    # Respond to the callback query to acknowledge it (required by Telegram API)
    await bot.answer_callback_query(callback_query.id)
    
    # Write the rating to the file
    with open('results.txt', 'a') as file:
        file.write(f"Rating: {rating}\n")

    # Edit the original message to remove the inline keyboard
    await callback_query.message.edit_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥: {rating}‚≠êÔ∏è",
        reply_markup=None  # This removes the inline keyboard
    )

                
async def download_video(message: types.Message):
    video = message.video
    file_info = await bot.get_file(video.file_id)
    file_path = file_info.file_path
    new_file_name = f"demo_{message.message_id}.mp4"  
    await bot.download_file(file_path, new_file_name)
    await message.reply("–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    await queue.put((message, new_file_name))  

async def download_round_video(message: types.Message):
    video_note = message.video_note
    file_info = await bot.get_file(video_note.file_id)
    file_path = file_info.file_path
    new_file_name = f"demo_{message.message_id}.mp4"  
    await bot.download_file(file_path, new_file_name)
    await message.reply("–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    await queue.put((message, new_file_name))  

from aiogram.contrib.middlewares.logging import LoggingMiddleware
dp.register_message_handler(download_video, content_types=types.ContentType.VIDEO)
dp.register_message_handler(download_round_video, content_types=types.ContentType.VIDEO_NOTE)

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    queue = asyncio.Queue()  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    
    for _ in range(2):  # —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        loop.create_task(video_worker())
    
    # Your existing asyncio queue and task creation from above goes here...
    dp.middleware.setup(LoggingMiddleware())
    # Instead of executor.start_polling(dp, skip_updates=True), use this:
    executor.start_polling(dp, loop=loop, skip_updates=True)

    loop.close()